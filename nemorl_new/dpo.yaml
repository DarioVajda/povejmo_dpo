# Cluster Configuration
cluster:
  gpus_per_node: 4
  num_nodes: 1


# DPO Algorithm Configuration
dpo:
  max_num_epochs: 3
  max_num_steps: 1000
  val_period: 50
  val_batches: 16
  val_global_batch_size: 16
  val_micro_batch_size: 1
  val_at_start: true
  seed: 42

  reference_policy_kl_penalty: 0.1
  preference_average_log_probs: False # whether normalizing log probs according to the sequence length in preference_loss
  sft_average_log_probs: ${.preference_average_log_probs} # whether normalizing log probs according to the sequence length in sft_loss

  ## TODO(@ashors) support other loss functions
  #preference_loss: dpo # the preference loss, we support dpo, ipo, rpo_sq, rpo_bwd_kl, rpo_fwd_kl
  #gt_reward_scale: 1. # the scale of the rewards in RPO
  preference_loss_weight: 1 # the coefficient of the preference loss
  sft_loss_weight: 0 # the coefficient of the SFT loss

checkpointing:
  enabled: true
  checkpoint_dir: "/results/dpo"
  metric_name: "val_loss"
  higher_is_better: false
  keep_top_k: 5
  save_period: 50

policy:
  model_name: "cjvt/GaMS-9B-Instruct"
  tokenizer:
    name: "cjvt/GaMS-9B-Instruct"
  # number of preference samples per batch
  # each preference sample corresponds to a pair of chosen and rejected responses
  # so the actual batch size processed by the model is train_global_batch_size * 2
  train_global_batch_size: 64
  train_micro_batch_size: 1

  ## TODO(@ashors) support
  logprob_batch_size: ${policy.train_micro_batch_size}
  max_total_sequence_length: 8192
  precision: "bfloat16"
  
  # fsdp_offload_enabled: false
  # activation_checkpointing_enabled: false

  dtensor_cfg:
    enabled: false
    tensor_parallel_size: 4
    cpu_offload: false
    sequence_parallel: true
    activation_checkpointing: true

  # Turn on dynamic batching
  dynamic_batching:
    enabled: false

  # makes the training sequence length divisible by the tensor parallel size
  # this is useful for sequence parallel training
  make_sequence_length_divisible_by: ${policy.dtensor_cfg.tensor_parallel_size}
  max_grad_norm: 1.0
  
  optimizer:
    name: "torch.optim.AdamW"
    kwargs:
      lr: 5.0e-7
      weight_decay: 0.1
      betas: [0.9, 0.98]
      eps: 1e-5
      foreach: False
      fused: False

  scheduler:
    # 1) Warmup: linearly ramp from 0→lr over WARMUP_STEPS
    - name: "torch.optim.lr_scheduler.LinearLR"
      kwargs:
        start_factor: 0.0             # lr=0 at step 0
        end_factor: 1.0               # lr=full at step WARMUP_STEPS
        total_iters: 500
    # 2) Cosine decay: lr→lr/10 over all DPO steps
    - name: "torch.optim.lr_scheduler.CosineAnnealingLR"
      kwargs:
        T_max: ${dpo.max_num_steps}        # number of steps to anneal across
        eta_min: ${policy.optimizer.kwargs.lr} / 10

data:
  dataset_name: "TranslationEngSlo"
  train_data_path: "/data/bad_lang_examples_train.jsonl"
  val_data_path: "/data/bad_lang_examples_eval.jsonl"
  max_input_seq_length: ${policy.max_total_sequence_length}
  
logger:
  log_dir: "logs"  # Base directory for all logs
  wandb_enabled: true # Make sure you do a ``wandb login [Your API key]'' before running
  tensorboard_enabled: false
  monitor_gpus: true  # If true, will monitor GPU usage and log to wandb and/or tensorboard
  wandb:
    project: "GaMS-9B-Translation-DPO"
    name: "NeMoRL-DPO"
  gpu_monitoring:
    collection_interval: 5  # How often to collect GPU usage metrics (in seconds)
    flush_interval: 5  # How often to flush GPU usage metrics to the loggers (in seconds)
